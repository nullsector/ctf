use MIME::Base64 ();
sub  trim { my $s = shift; $s =~ s/^\s+|\s+$//g; return $s };
my $a = "";

print "You're doing a thing...\n";
my $input = <STDIN>;
$input = trim($input);
if ($input eq (chr(5156 - 5035) . chr(-4615 - -4716) . chr(3162 - 3047))) {
 $a = $a . MIME::Base64::decode("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");
 print "You're doing a thing...\n";
 my $input = <STDIN>;
 $input = trim($input);
 if ($input eq ("\x6E" . chr(-4095 - -4206))) {
  $a = $a . MIME::Base64::decode("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");
  print "You're doing a thing...\n";
  my $input = <STDIN>;
  $input = trim($input);
  if ($input eq ("\x6E" . chr(-4956 - -5067))) {
   $a = $a . MIME::Base64::decode("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");
   print "You're doing a thing...\n";
   my $input = <STDIN>;
   $input = trim($input);
   if ($input eq ("\x6E" . "\x6F")) {
    $a = $a . MIME::Base64::decode("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");
    print "You're doing a thing...\n";
    my $input = <STDIN>;
    $input = trim($input);
    if ($input eq ("\x6E" . chr(-3542 - -3653))) {
     $a = $a . MIME::Base64::decode("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");
     print "You're doing a thing...\n";
     my $input = <STDIN>;
     $input = trim($input);
     if ($input eq ("\x6E" . chr(-4976 - -5087))) {
      $a = $a . MIME::Base64::decode("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");
      print "You're doing a thing...\n";
      my $input = <STDIN>;
      $input = trim($input);
      if ($input eq (chr(7629 - 7519) . "\x6F")) {
       $a = $a . MIME::Base64::decode("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");
       print "You're doing a thing...\n";
       my $input = <STDIN>;
       $input = trim($input);
       if ($input eq (chr(7669 - 7548) . "\x65" . chr(2921 - 2806))) {
        $a = $a . MIME::Base64::decode("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");
        print "You're doing a thing...\n";
        my $input = <STDIN>;
        $input = trim($input);
        if ($input eq ("\x6E" . chr(-1638 - -1749))) {
         $a = $a . MIME::Base64::decode("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");
         print "You're doing a thing...\n";
         my $input = <STDIN>;
         $input = trim($input);
         if ($input eq ("\x6E" . chr(-2655 - -2766))) {
          $a = $a . MIME::Base64::decode("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");
          print "You're doing a thing...\n";
          my $input = <STDIN>;
          $input = trim($input);
          if ($input eq ("\x6E" . "\x6F")) {
           $a = $a . MIME::Base64::decode("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");
           print "You're doing a thing...\n";
           my $input = <STDIN>;
           $input = trim($input);
           if ($input eq ("\x6E" . "\x6F")) {
            $a = $a . MIME::Base64::decode("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");
            print "You're doing a thing...\n";
            my $input = <STDIN>;
            $input = trim($input);
            if ($input eq ("\x6E" . "\x6F")) {
             $a = $a . MIME::Base64::decode("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");
             print "You're doing a thing...\n";
             my $input = <STDIN>;
             $input = trim($input);
             if ($input eq ("\x6E" . chr(1999 - 1888))) {
              $a = $a . MIME::Base64::decode("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");
              print "You're doing a thing...\n";
              my $input = <STDIN>;
              $input = trim($input);
              if ($input eq ("\x79" . chr(2701 - 2600) . "\x73")) {
               $a = $a . MIME::Base64::decode("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");
               print "You're doing a thing...\n";
               my $input = <STDIN>;
               $input = trim($input);
               if ($input eq (chr(-6538 - -6648) . "\x6F")) {
                $a = $a . MIME::Base64::decode("E518lPlwdgqpfuEIMpBBD7xwVUdEAQg6CIEIZmCErhpBrFGcYUFIpNa1tpWXA1H+AAIUUIEU6GASqx3EoBbkNsOGWMQj9p4/7iGOWgiiBnF1lQxFoKKvroABHWgAXHg5Q2txFgH0QWAC5TmjTYyqLTcawRuSAYwgKCADMUJACPy2ARLI4At9qE4k2GCG3JYyEQ5bBBd88KGqEYgEB1XCcduw5Wm0LB7TSOR3AAGILaNmG+R4GUtlto+a1qIWg8SzOMTrMPKOzLyuKTESyQSNWCQiDP4ChM36cAYs27c6sEgFIsxgBTZ8gb89YAIcOjGJJoCBDkZIgYKNoANUp2AudCER5p4IYV46wLOpmjCA2EWHSYhhBm/ABkgWxCASB1vYIMxmNlBBhYPGda5GkUD+WLvg1aUI4C1TkaFAONvZHvtYSA1p2lUawQMD0IcDJyibGDJQ4buEgIEbyEAMfsCGkK3CSlm2wiWWg4Yl+KBAFXGAAjCggA24wAdA8EEYElGL4MQDG2pCxVCLmohfZCMb26CH8ugkEjznGRjzUEfHOXPTX0BDG9tNjnNntg8T34NM2lN0cpOACVpwgg184EMecVZpMySBDWy4X6cdMYk13KIadCi1WHXAghR4AAIa0MDW0qpLWEf9iVZhFQeAsIlB2CAjYpAEKqiB8niwhjXDJnvZhRWPZEwiCijYAA2g7KoJlLMDdKBDF+wOAhW9JdxIici1r5XteArJKoIrADn+jDDPGWCAHLhohA0mggATmAAFLiCBkvEF71VkfhWHuTQfaPELTJxSjbHq97kDXoPxKMFLKBcfJUvhCKKiwRG/QB47XnZxj41MG6VornjHG4tAAmebrkGOocTxsESHQQmD8bwsIpHbmi/KObSwxKV3zgR8MYELP5/EMaqxCbEiOME64IEOUpCCuxAkBFKHdeB6eBUgvCEKsaKBBAdRC3Gk3Oz757+FyAEMFSOByZMdV2EICRCBr7C7RwgFyAEBCKCA95sAv9sxwHs/G+mWAhCbC/IIcvCHRsCAAgiQGhAD+fOBGOCvI5gyzZOF2jIDM4CEz1uEH4iBGFCIEag8uKL+gIOigeMKg1JwLnfIhvEphUsQI9QphWnYGHqwPeIAn0EZGXOghtz5hVKwpE4APuwRvj/KjH0YO90IhlgohTxQPh+AgZeLOZrjA0g4BeiIjurDtD7wguzjgkCYhDfoAjpQBWRohBWAAi3QgjigOzqIg/hwtYGIuho6AB1DgLZAgKYJlSg4i7cirhaIAk8Qh30Yh/7bRE6sCWAYBBRAARqovMpTgBGwkQA4wBV4BFBYwDlgAQekK6wYIBrSMXjiu9C6EQ5QhWSQIBHYFlVQhVkhARLIABuQBGCAg1PClxRkA3mLhM27rRekhVkAhBmsQQcggfXbgBIYgG9CgSUIA0D++AU34YxpqIUiDCNAWARUmIZsYId6YIdsyg2LwzNtkMJKgj3ZAwZtMId5MAeYiRkn9MITE6o8aIImKMMdYAPvSEM+WIU25A7rgwQ5xKLyGIRBoAIoyAV9CAUhQCY6aIRNwIVcwIUgmAFXYz8EUCdF1CwAAABvQZAgmEmURIAMwAAS0IsWyAAfqIUuHLtODEqyQyK3gZmyAYlsEIMhCMViDCiFoDoJSJFzAYXHUbAu8IAUkADKMooGaJEbGgDNMYABGhVtQQqz3ARV0MUIGIRGGIEAqIAZIIEE8QQ4yJc/OAKFYiiZ+4IvkEZI+Aw5lIH+GAHEUQBvHADZGYI8cAT+TFiEdcydUqhCOAujVPgFd9wGdrA9E3MHemwpdbieMCTCRDizWtiueWiZJmSm4RBIITRIMACDJngBGDgCSLgjF+QDTmjDRMmtRTCWVGKC8nCENxiCIRgESYiDQcCFTRhJY4AHfciFIDABzElJU3kXsHxJxNkxdRkCKpgBDsCLALnJdqNBMQCG8DGJ7lnNEhNK9nyb9CRKgWymeLiFIEAhYrTBpxygqGSAFbBKHjCCORgrEfgqGuuAaoELAJChsaQ6HIGnQViGbXm/CAiAJkOBIBCDQYADSAge24q3vUwCK0gCMxieRdgvweyPbHyRHHOBq8IEQCglKzidNmgD1En+BD6QqJCSuG3YBvAZB3FQHm0yBzIJzSJ0hFgQB+7aB7fpq9W8vXiohluYqDZASB+QTRhgyFSgOUiQjenDLyvoTTdggt7MgzMzIx+YIBvQAu+qBeAwh0+sAencJanDmhzjJQCIO/gIAhGImvDEyTQigRrwhOSxuCYcFEPNlfZM1LMhSmZKHo8Yh2xQhSE4gf5QiIpwDwEaoAZ4MQ/4z7AKBTroKrtbAa1ggLeACxlyFgnVFm0RA2xAoAHCUw4gERQYgkgMhM+IkikLmUgoHSt4DD5ghRKtG/cgkBHIgGEqgYMCgitchJzLgR1IAn+BKETApNAQBzqLB5XKhs3gTN3+gIabikw5wsQkRVTV7Ad+8Ad6OAZVQIWGWwOCW7Eoo00uSp1VkIXn8AVagIQkmLIwLQVouIQ8CKM2eAHZUQAaeANBcAQ9u4Q2cAEUSD85hTU6PZIDkCEScQt2aRUFUIBiJMYNoAJVoB56BLHONDFFTdm3iZnwEcJb2IQ3AIITiJW7QYgP+J/3k6Fw0Q==");
                print "You're doing a thing...\n";
                my $input = <STDIN>;
                $input = trim($input);
                if ($input eq (chr(713 - 603) . chr(-7481 - -7592))) {
                 $a = $a . MIME::Base64::decode("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");
                 print "You're doing a thing...\n";
                 my $input = <STDIN>;
                 $input = trim($input);
                 if ($input eq ("\x79" . chr(-2645 - -2746) . chr(-4896 - -5011))) {
                  $a = $a . MIME::Base64::decode("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");
                  print "You're doing a thing...\n";
                  my $input = <STDIN>;
                  $input = trim($input);
                  if ($input eq (chr(-53 - -163) . "\x6F")) {
                   $a = $a . MIME::Base64::decode("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");
                   print "You're doing a thing...\n";
                   my $input = <STDIN>;
                   $input = trim($input);
                   if ($input eq ("\x6E" . "\x6F")) {
                    $a = $a . MIME::Base64::decode("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");
                    print "You're doing a thing...\n";
                    my $input = <STDIN>;
                    $input = trim($input);
                    if ($input eq ("\x6E" . chr(-6850 - -6961))) {
                     $a = $a . MIME::Base64::decode("4AMVhpDkFk8cqYU/deYBMJgCC8QkEUDayCORS375pZRYEpRwwRPdEacWRwIJJMQwsORiBxh24EKQaSacEJhaLtl55zyUcKExftfD8aG0HioAPAU2QAMTPqz4oxNHoqCBBCNrGEKMSd7QSoMUvJ5hBhRCqmHJqd/YBIUN1N7ABbFNoEDN/qLkHorbFFjw2usF8tx7768qCOurAwrFTlDrDChc2vUaYzSIKFQhp1NO4zns0sotv9wvTe/K1LB4EguVoZIQOsiBDzD7OyxxoZNVOCO6eGSXUE47x7RHHlkKKttFG7ZYY117rdbXVhCABSOcevPNYbn1QIDmw1Vd9QgKaCQZDtJlSC3dhhiECipUmaSG5RwIAIPzTsDgBPHeUIUK8RywzIAQUpAgthWEoKMRVTbxpBZtKgSmFAFEEDSmEYtFoKFlbUiEIxLRoksAQxwmk9A0OsGFJVzQBzGBA8xg4IQSSWhC00CFI3j2ISW8gAQkINXQMMABlthABGvhwFeUhoYD/m4hEJ0QhL5QQIMj1aAGVBhCCYiCkuuRwEslqEETgLAG8HnlKyn5TpriNrehEAc4E9hKmvjWN7IUDjuHK8uhykI4xAWtMeWxwRCox6lOYQ6OcbzcpvDCuWQMYlTpcoBYLgMrh0TrAIEEgHjKNQEJeK1OdJiDEYzXFCNwSwc8gOQccDcH2TWldzwAgSSL5xQeKGUXw3okI7k1FAEg5XnQU90bsBEZGyxGLRwAABDekLVp1EIMBHFAAdZTgBH4knyD2ET7ZvO7362gC5QUzVKakY1sLEMVkhCmLrKRjxB6QhBt2AIgAIEGNLRBCUoIwyWgQbITASMQMtmgD172g454/sEREQzhCAORBxc5Yg1AQGHQhpYWE0ShljNwjgj6tIEwdBMOgfDEIIIARCACAQUVkNJWhtKVEFw0AwgYQAl0cKer+AksgaTiSK2ogQlsBqUNCJdYQBqWzFhmM9chAAEWMEbMXKdwJkVj0NAThEHoIh5BdaMciVrUwXBuc8loRB5HNbq0dOClEwhkAihASOiQcQIQuIomGXCtUlqxW4w0wlKYkjynNOWsoFikU3TAreYV5a0CSOW4yJWqKJCjAAsxAQcKcLgKmGBJYnDEG4BgkPHs8ny7RB8NftkBY4KAW5aUHVNAwQx25IMcycCFKlRBTcrlA5ow6ljGAAGiMCgw/hbyPFktJCGJTqCiEzix4A9k8AMvBMJm7hDhyrYUiFKggrBUYuF60jIDgFJhBg4RgQG+YtBErEyYDJ3BQ4FQg4uiJCgVHYsCVtUmMOhAKFQ8wEjJW17yTgCqL1XvejWjUgPQlE8TwExfxVgWoiROcUEblQ0GgYvDDNWoARbwXdy4qU2Rg6EJmUG/dhmB2Ty4A7KSgBYpYIGqvu8yZhEAcSDAAAaUybxEGSkLihWnsx7PKV0gJQtcIwDPeIAFwmnehokzV9UxJ1U28MdaUkW4lMygBC7YAAl2Sb4b6XIE5jnfg41J4lAEa5mnYQc5cLEJak6OHELtFGu5kAoD/oEV/hYrRSdKAQ11iIMaqPBEJ/o3IW10ordc+MEPuGAicYxwg1xwhC7EAQwxkKACw03LoE1ggxk8BCITQIAL3qCyQUhiE9KdLhBpYIIQYDe8gXQXd0sQyBJoJXCBFLVIzWte+UIvMxLADGQwDNMJwJeKFWB1qtxVFjbdd9AiGMFD9lq+QSSDjgMWtlEnRzlPLRVso1oOBi7zgQ6oANqzkYB7Aymem9Y3qw1gwOFCaoBRf+c7B0iBZ1yTrNZwC93WMo7XINA84My4OB6wcaqyJy5VxHQSxFlACrowiU1sYgBdIfJyUoU+HI/gp4MwFapk5ZkVgCId3QCF7eZAB13UYhBD/nhDLaZBjVp8vBZ10YYk3DCLWfwBzAha0SL+UAr9AAMYxqAGCN0c29jSFg4mmoYk4IClTvxCQrWgAvZYOOi0rMUyDxEjAlAgBkG8QZiboAMPXkkDFGQgAyRhLpv4dAB3uSsE4Q53n8Lt7fGWurynVp2E2S6rCLAaM7YmLwIgsy4EyL0oF9X70fc6gkL/etiBL+qm4pENVYBqBGAzgeKY7WwVCEELcYgDFISwAglwWzmtjoABVkW4CQdgM9CSVeglIALOSCAAHHiwZTrQANAb4Di3NmMZxU4B7PQGevV+FXYEsI1raSAe46iGLvyhg09XIALswUAQqPDLvG4iG4NA/ljpDgJoRBlBfyq+Sg1OqwQYwGALnYiaG8i/iGBYQyOsYAX5WRGMWbACEuSHRMipoY12nOhE9jgnz7nwEklAKBY2KBBQQRzUYR+oQdJEoOiMBtHUQgRCwCxCYAbE4A2gjrPoQAi6BwjeQwEqAACYa7yCQtO+DgAAwDomAALLiPOu4+zQbqRa6ivKgjg8DALkC+4ybALKi+7ExV2u49aGQu8uyiwaQlRMYAhUAcAETwkthXKyYROiQFQeQnqsJ4YKYDaEIA4aARe2sBFWY9oM6arIiHDCaNqkhzkiYK+aIwJiyMECoAPUo5+WqwJKYAD6BAAQoCEILgQQoAQRQCzu/rAkVOlVZChaDocAzsEIhOIYrmIBtqELUIJddMQE3qARomA9aADq/uUgZCAGMiAGiGw9hmAxrA==");
                     print "You're doing a thing...\n";
                     my $input = <STDIN>;
                     $input = trim($input);
                     if ($input eq ("\x6E" . "\x6F")) {
                      $a = $a . MIME::Base64::decode("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");
                      print "You're doing a thing...\n";
                      my $input = <STDIN>;
                      $input = trim($input);
                      if ($input eq (chr(-3392 - -3502) . "\x6F")) {
                       $a = $a . MIME::Base64::decode("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");
                       print "You're doing a thing...\n";
                       my $input = <STDIN>;
                       $input = trim($input);
                       if ($input eq ("\x6E" . chr(-1267 - -1378))) {
                        $a = $a . MIME::Base64::decode("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");
                        print "You're doing a thing...\n";
                        my $input = <STDIN>;
                        $input = trim($input);
                        if ($input eq (chr(1008 - 898) . "\x6F")) {
                         $a = $a . MIME::Base64::decode("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");
                         print "You're doing a thing...\n";
                         my $input = <STDIN>;
                         $input = trim($input);
                         if ($input eq (chr(-85 - -195) . chr(2526 - 2415))) {
                          $a = $a . MIME::Base64::decode("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");
                          print "You're doing a thing...\n";
                          my $input = <STDIN>;
                          $input = trim($input);
                          if ($input eq (chr(-1211 - -1321) . "\x6F")) {
                           $a = $a . MIME::Base64::decode("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");
                           print "You're doing a thing...\n";
                           my $input = <STDIN>;
                           $input = trim($input);
                           if ($input eq (chr(177 - 67) . "\x6F")) {
                            $a = $a . MIME::Base64::decode("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");
                            print "You're doing a thing...\n";
                            my $input = <STDIN>;
                            $input = trim($input);
                            if ($input eq (chr(-5625 - -5714) . chr(-3819 - -3888) . "\x53" . "\x21")) {
                             $a = $a . MIME::Base64::decode("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");
                             print "You're doing a thing...\n";
                             my $input = <STDIN>;
                             $input = trim($input);
                             if ($input eq ("\x6E" . chr(6727 - 6616))) {
                              $a = $a . MIME::Base64::decode("GIQkqPCvW8cR2NbmtaMSoOsiz9bIKTACiY/doAksoOpWr3pyiuajBiE7BSHwlnI8+5Ag07PsZg93lcm3uhZIYkX5CCeXVZKN7fRgutsbM73LbKQH5jsjvNHugB3jVjkHIQ6DiMMbSpsMhy+88WQ7DeRVwkMKLXV7+6WMo8PV2v82BjNzXuYghNCB/YmABo2QhAr4iT0kXG/OouxnXjZBjub6ox/yYC5KbG4DSWRD5zxf5zGj8HJV2GBiM2Y6Q43unuUvvwJMb6i0czeJTaQTAInUAPYXIACsB6CXBshbSfMmfmXf2ttmP3/Z/tGed8WcoAWdOOXbxXkilWBjE2/w90wXU92833SXlSlcEgHgZFRKAZzX4H1AC/QAF8QB3AAdNkSe40Xg4zUcSpADfgDD/RWSxN0ERUCQyxgOj7hMY5AMpZ1AHNSCir2VCcZBnalAD3hED8BBDwjBG1DBrQAI4tRczL0dP+SDJ9iAGJBDARCNBpgUBlBBNRRUDRhfHGXA9xgEFEahQUAJlBjEMx0HUPjET1HBG/yGbDHfQnxLBHRAWmVNmynM7CDHxJTd1VUd0h3Aj0SKuFnZYvSAe2UJ3HUKOTQCFXQVClzGnFRX3hxG111LgAEgxg2geuBYW63OCXxAD7BeC0BB/i3sw+WkBM1JoCaqm5bUl0yAyhsEgcTxBw2MiVr5EgiGYGGMYAFQmgMMnA0UmKR5hf70ALDEgSdAwQn0IVVEAK6oQu5tST58Uz6gQhTFA5BMQBFaGQYAwSSY1gzE2HE82ZNxVDSRgGVthjZmwDYK3px84w/RDQ0UAHSEgAkMyAy00TM1hBh+wGeJgCt+lnoQRhomUj0K2RuGh2SxyRyqnTRVIh7+UYnkwzLYRViRAFMxRsVJxtQ1SO4Ax3flxphg3L8A3mKA1lfRQGP1AEf2QBwkwz6kSO7h3iaWpLLgx4pggyTwxxBQgfsMwn8wmkw2WmMEAAZcBsBJmkf8Uxy0/oAWxAGl6Q/dDKUJvIEu+AMNIeU2+QMq2EAP+EMAKMUCHIZ6PGEa0mME5BY8kRu5tQACjgyiJOCkdSQTcCQXcMH1IEEPaMHhxUEUXE8CYs8UKZUDAAAJZEAhNYlm6OVN8hPJNEbeqOGddEu3RFSe1M7RUVAcSsp5YMAgqt0JiIE2SBVLrcVbZMk4xYMlUUEQwFAaBWKaAYgRGMHXmdS2pAejnaZQdEQA3IQDACINYA9HtoAnOEtLkKRJ5qaJoKQ/kAMKFhIsUYHQCWDmzeTGOUYrQoHieASl8UXAQUEuAIMW9AVNfY91FuUzVsM28cM45EMtzJI/zIBUUqVBvMf4/iSHCBVANCkgHPzBH3gBosiADLgBK3RCJ0gCfHqBJLACK8zCLNTCXkmCG0hCJ9QCNbhIp9knKgQCF3RCIIQluTlAC/DFI2JAk5CcZuCFCjDVIVXAti3FDFBAtBFNG32HgEjh0U0AAJRHEzmmcNHAIJhDSPpDZaoFvqybSvQQV9VA9IyX/oWmCRhBF0idt0QQav6XaopAppEMIJ5AWCKBJFADfrgEbuqmlSbXlPYmNuwHIfHH3SiiccqG4H0AFHgCUEra/sSipMWBNlDDyJGctBmZkYVE7/TOGkyCLhRWDdVCFDhAPACB83mReVaA0cEhepIJBtQAFTjYN8zDPARD/if8gRt8QSc0qqPOwh9IgqU6qqOuwzcEAzWYwzpogzYEw6Y+aidYAyt4QVnKpwwk4GxiD6y2gBgEHUeeAAoMiICEQA1EQQ0QqjlWAEK238+gAFE8U3nujdiFoESs2nGoXRDU5oymm1v0w5b4g4rUBNAUkkb66GlqBLVtnaNFkExKRmMUoGZsT2wi4CBIKXxdKbzuZpaihC4MggbSSQOBaZhGQKKR6SBAQXPeBIbykw3gWU2Q3Ajc1HuEBMaUwAb0DhhMwi1Uw9xFwQhkAxUgAAUswKMgQK4ZKnJwlwPQQBQ4mDVw6jx8g8p2AisEw8nOgzWcqqN+qqlqg6MGg6mi/mzK8qeqdoIbuOqrdiRHIgFa9kAgeBrrqSUM3WUGmAAQDMEMtEv0oAD2MAETwOWEAhWyMkRtoJWZuCgd8g9+qAS1usXlzEQ52cTq/AxjqCa9qWGRNppMYtxFnCuOmZNesGUtfGK89m2J8CZm+kMyDILdPVBlHOm+JlpepJ4DqIBX8pOF3uRWSRFRCVH63JRBmMzRoECVoICi2gXJkMMgaOwClEAXDMIbhEAXMRSeNGb7cUEgvKzOsoIbuMEisELMoqw56FktdAIqaIM5pOwsBEPK3mzMzkInOKo1/MEPMIEX/AD0/oCrWi0TyAATwAEcOC8ccMES+EAMrNEGRBEQ/sBQDAyBD7TADxzBFzAB9LKer5LAQQDAGyWPy0SEZviEUhyTSeCHvZQtWpyGaexDIPmMv92kIy5GepDJdXkLks5tYdRtWw0HY9CAGKCCgb6XVPmtBq8FSgauvQxuWBnu4RbnTDoJBlAnP02crDYGaISAA5hjCBSAhphPYmCANR7Ne4TACEaBCZAuHRyDLtzCJOiAF4GsZC3V0HLBLMjsN3SC9B6BF/xBKrDCZPKQfd4nMKjDPJhDC+0V8TZxy0Zqoy5v8z4v0MaAfEqvfLqBew==");
                              print "You're doing a thing...\n";
                              my $input = <STDIN>;
                              $input = trim($input);
                              if ($input eq ("\x6E" . chr(4799 - 4688))) {
                               $a = $a . MIME::Base64::decode("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");
                               print "You're doing a thing...\n";
                               my $input = <STDIN>;
                               $input = trim($input);
                               if ($input eq ("\x6E" . chr(-2065 - -2176))) {
                                $a = $a . MIME::Base64::decode("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");
                                print "You're doing a thing...\n";
                                my $input = <STDIN>;
                                $input = trim($input);
                                if ($input eq ("\x6E" . chr(-2054 - -2165))) {
                                 $a = $a . MIME::Base64::decode("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");
                                 print "You're doing a thing...\n";
                                 my $input = <STDIN>;
                                 $input = trim($input);
                                 if ($input eq (chr(4009 - 3899) . "\x6F")) {
                                  $a = $a . MIME::Base64::decode("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");
                                  print "You're doing a thing...\n";
                                  my $input = <STDIN>;
                                  $input = trim($input);
                                  if ($input eq (chr(441 - 331) . chr(7604 - 7493))) {
                                   $a = $a . MIME::Base64::decode("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");
                                   print "You're doing a thing...\n";
                                   my $input = <STDIN>;
                                   $input = trim($input);
                                   if ($input eq ("\x79" . chr(7212 - 7111) . "\x73")) {
                                    $a = $a . MIME::Base64::decode("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");
                                    print "You're doing a thing...\n";
                                    my $input = <STDIN>;
                                    $input = trim($input);
                                    if ($input eq (chr(894 - 784) . chr(-7141 - -7252))) {
                                     $a = $a . MIME::Base64::decode("6MO+6W/wBhYy5s3u7BAy4FD1INI+Y9QeAvVL6grdFedZYscJIHbsvprFQJKgDagwdVJtDx4HnzaARKfO7pLr7l5sWQPI5/EBXH9N4De+75pOIflisTZt4/NkEdWOApNw7V8xxEuRPhNjcUUtCcnyLfOAbYPhBtTwM+ZADrbxBrhwrBsv0u7t0b+yD52wMaxD7y6tde/ib/2dwfvclcnjW55e5rYH845wD6WdFbh+etnwo9mwNVdioj4/C9oQDG7gBl8m9NSgDf7+oPaNcOwar/QAy/Qp+yuQFvUdBekUq/cW/r3MbNYy/u9knXCd3vhdhymiLggwk/QEKXPmKWJEQpgwOg/zoKd2XwtXZiUzog3Ggg1e2/eM3fG/Yg4aM+9h0hlvYDxaTkmJz/iYfjaOL1ybYfJgHwKUn8mXT9Jmb8wFtg9xmvxC//mf7zOf7w78emDrvvqT2/rHwgSD7xcl0RlRoEKTQU9S9b32ovv7zGnR/vteN/koEM33QPxY0Y6OdiTtmEgjVFREFazuaPDV78et7w+oABBMZJw4MWIEBoQOFEZgGGFGPg4RJU6M2DCCRIsZLRbg2NEjx40fRY4kWdKjCIwRQGr+ZMmQZMuLEStUIEFCzLh7/vLt9NfT50+gQYUOJVrU6FGkSZUuZdrU6VOoUaVC5SeU39WcngQSNIgwoQOLHPy1rJiRA0yNJgtkVNvW7cmUK9GGFAlT4syaVHDq5DvV71/AgQUPJlzYsNGqQa/yyynpx8CCB70utJjPBMOzaNeyldtw89y3od+mVPl57mmWd2mSoJItZ76+h2XPpl3b9u3ZiYEuvhdvkAzIXSeDxRwh3xDQHV3WZXta9HO1ZZejpq5Rdc0o1V7Trtrdn3fvuMWPJ1/esO6f9LBiEwOcq+SvDUVESEaF4RsbIW2YcBvSOXQAmfOvOgJj4gAvEoZI5h7+nsxz8EEII5TQKqHUYwyYKIAzCL74NJovmUYiQMklXBpZa6TlNlPuvwBb5My0Ak+7jgQgdGEQttgm1HFHHnuUCj2fFuMHlSA0FG44sy6KAJdNPDOBg2RUOfEjz1Z668UWRXsxxupmBOKWnXDE0UcyyzTzzKDuuYcxfzzpoYcWjsQggjnJiqARf5IhJx6d4iFnkCk9qhI6utwy4FBEE1XUgJcGhZFLu2Ra7UudxETzUkwzFY/Nffb57qp89jHnjx5oeHIisio66414qKDChvnSyvLRFNta9NZEJ0CRLkhPa6AhBGvYRMx6NDX2WGQBq6pTTxfbZx5p3JBhhhQmQDX+NenEwMasEWsNsKXQDiVgXHLLLdcAXQUsrbNeWWrg1wiCHdafnIpN9l588y1q2U4/vefZYb6YNgRrSTNLuiDGipWlWWld11YDzJWYXHR3fZjddi16lyF5Ycupn370FXnke/ltlrFnZzli2gkKlm4uDuzTbFZw3xJ3YokrZq6kjGNqaON4V6thkpxy8idkkpNW+kyT/X2WlcdmaPla1AYJq91GZTU0YpzN1fm5jKUDGkEaHBmH3p6QXnpttiVsGqtnO3nMhKlJM7ihs/wJQsQIlskP0qyxVOvmrilOl1BIrx17NRoEOZvBtiOX3Ly3UZ7nD+DodjkzA1OLIJ4ZGiL+h4oZ3riswMALHZzrwsf9GkAuFYcXQRTeyIbefNSefHfez/OHWacvl6EFEwim+m6GPiQnm3j4DKKRbJBD3WLBTSK89ddhL1B2jldDQYxq6I1H997LN//H3/t11pqVZRChWqrRmg8XXYYYgj9BHSYw9Ys9ur7wQ9GMYdQzkAQk0L0MkAAFQ7gF7s73QAg6pXL/Ckb7RGA85HlOFU1al5IwFiP+leR/XQtglmqmrgIeMGgJRAGl+DGmCMZQhhQCHtxUNrwLbg41Z9mELkTEEREEyk6q60/1OjJCnJVQgN6iknUMiEAFAkEV+ahKP+w1QyzKcIL7kNvwNBe/udjAPkH+FEMyQPJBJTkqNFoTCRInpsSGtaUlT1yhAoVFxaNdMYt7PN8E3fGHx3zgixlETRTIMQOZ9a8z3zIiR9yYM0bFsYgaoeNMEkgCGkyCirAhHx89ObkJUkNaMviACOr2stMoiBw4igcu1LgiRV6pkQV4pNciucRYNrEhlazAJVEwiHxA7pPD5F3l+AEMLwCnBabUIXU4oItNRGEGIhgLESXJxo/U8ly3ZCQ2UchLX7IKcp0kZjlJZjRPfcoftfDCY5a5Oc6hJh+hY4g/6MnEa84SV/vk56L4h09dWicECrTJOHCkR3MmVGRA6sk+UCGQONGNIoTMzFmWMYizFCAZM5D+pCT7+VF+gu2VFlGAAhhiQA5gQIFRAIbRFPrSpGGlofPoxMoMYsqJotI6ERBD9PLXUaBaj3XY4+Yk+0dSBYDFgBLgwEpbmjaYRjVfMv0dTX/QgjhxAJ6E1EgUglgADnw1qGNt41ABWFQ5jrQhJVUqSldaC6ORU6pzRRNVn4U5rI5AqzmNJ0xAEkRVmChQZB2rNimGVrWoLiNsjcBSm7pAuOpErnSlrI/sOo9RxikCW9XpADuiClwEYQiDJWxHDes6xJpkQINirGMV6ANU3GiylaXthOyqjWTKwCB7zSl1bBcP2OSDHCbKZWlbdFoCwNGoiw==");
                                     eval MIME::Base64::decode("");

                                    }
                                    else { print "\x6E" . "\x6F" . "\x6F" . "\x6F" . chr(-2992 - -3103) . "\x6F" . "\x0A"; }

                                   }
                                   else { print chr(8064 - 7949) . "\x74" . "\x61" . chr(6712 - 6608) . "\x70" . chr(6567 - 6557); }

                                  }
                                  else { print "\x73" . chr(-7693 - -7809) . "\x61" . "\x68" . chr(-4909 - -5021) . "\x0A"; }

                                 }
                                 else { print chr(-5886 - -5986) . chr(1905 - 1794) . "\x68" . "\x0A"; }

                                }
                                else { print chr(-2168 - -2271) . chr(2722 - 2608) . chr(-3597 - -3711) . chr(-5772 - -5886) . "\x0A"; }

                               }
                               else { print "\x64" . chr(7255 - 7144) . "\x68" . chr(-6354 - -6364); }

                              }
                              else { print "\x64" . chr(448 - 337) . "\x68" . "\x0A"; }

                             }
                             else { print chr(7179 - 7076) . chr(4420 - 4306) . "\x72" . "\x72" . "\x0A"; }

                            }
                            else { print "\x67" . chr(-6164 - -6278) . "\x72" . "\x72" . chr(-2988 - -2998); }

                           }
                           else { print chr(-4277 - -4392) . chr(1901 - 1785) . "\x61" . chr(5193 - 5089) . "\x70" . "\x0A"; }

                          }
                          else { print "\x67" . chr(-3208 - -3322) . "\x72" . chr(4068 - 3954) . chr(-590 - -600); }

                         }
                         else { print "\x67" . "\x72" . "\x72" . chr(-6610 - -6724) . chr(-6919 - -6929); }

                        }
                        else { print chr(-2444 - -2554) . "\x6F" . chr(2042 - 1931) . chr(7541 - 7430) . chr(-4965 - -5076) . chr(-313 - -424) . chr(6464 - 6454); }

                       }
                       else { print chr(4993 - 4883) . "\x6F" . "\x6F" . chr(5770 - 5659) . chr(-526 - -637) . "\x6F" . chr(1421 - 1411); }

                      }
                      else { print "\x6E" . "\x6F" . chr(7571 - 7460) . chr(-1057 - -1168) . chr(5477 - 5366) . chr(-3841 - -3952) . "\x0A"; }

                     }
                     else { print chr(2187 - 2072) . "\x74" . "\x61" . "\x68" . chr(-235 - -347) . chr(-3701 - -3711); }

                    }
                    else { print chr(-13 - -116) . chr(5667 - 5553) . chr(-7337 - -7451) . chr(1415 - 1301) . chr(-5014 - -5024); }

                   }
                   else { print chr(5164 - 5064) . "\x6F" . "\x68" . "\x0A"; }

                  }
                  else { print "\x73" . chr(2481 - 2365) . "\x61" . "\x68" . "\x70" . "\x0A"; }

                 }
                 else { print "\x73" . "\x74" . chr(6598 - 6501) . "\x68" . "\x70" . chr(-1800 - -1810); }

                }
                else { print chr(-56 - -159) . chr(-6780 - -6894) . chr(5442 - 5328) . chr(-1176 - -1290) . "\x0A"; }

               }
               else { print chr(-4151 - -4266) . chr(3029 - 2913) . "\x61" . chr(-7695 - -7799) . "\x70" . "\x0A"; }

              }
              else { print chr(-2589 - -2699) . "\x6F" . chr(7149 - 7038) . "\x6F" . chr(683 - 572) . chr(3046 - 2935) . "\x0A"; }

             }
             else { print "\x67" . "\x72" . chr(75 - -39) . chr(-1300 - -1414) . "\x0A"; }

            }
            else { print chr(3856 - 3746) . "\x6F" . chr(-405 - -516) . "\x6F" . chr(4221 - 4110) . "\x6F" . "\x0A"; }

           }
           else { print chr(5016 - 4901) . chr(3334 - 3218) . "\x61" . "\x68" . chr(-3179 - -3291) . "\x0A"; }

          }
          else { print "\x6E" . chr(5148 - 5037) . chr(1008 - 897) . "\x6F" . chr(-6101 - -6212) . "\x6F" . chr(-4244 - -4254); }

         }
         else { print "\x64" . chr(6451 - 6340) . chr(-569 - -673) . "\x0A"; }

        }
        else { print chr(6826 - 6711) . chr(6596 - 6480) . "\x61" . chr(6924 - 6820) . chr(7430 - 7318) . "\x0A"; }

       }
       else { print chr(-6801 - -6916) . chr(5187 - 5071) . chr(4781 - 4684) . chr(-4968 - -5072) . chr(1794 - 1682) . chr(-754 - -764); }

      }
      else { print chr(-4726 - -4826) . chr(6635 - 6524) . "\x68" . "\x0A"; }

     }
     else { print "\x67" . chr(-5282 - -5396) . chr(3348 - 3234) . "\x72" . "\x0A"; }

    }
    else { print "\x67" . chr(-1405 - -1519) . "\x72" . chr(6881 - 6767) . "\x0A"; }

   }
   else { print chr(-3108 - -3223) . chr(-1983 - -2099) . chr(2366 - 2269) . "\x68" . "\x70" . "\x0A"; }

  }
  else { print "\x64" . chr(5529 - 5418) . chr(5454 - 5350) . chr(-3375 - -3385); }

 }
 else { print "\x64" . chr(2375 - 2264) . "\x68" . "\x0A"; }

}
else { print "\x73" . chr(-6807 - -6923) . chr(-4008 - -4105) . chr(5500 - 5396) . "\x70" . chr(912 - 902); }
